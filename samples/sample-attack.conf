##
## Sample attack configuration file for crydra-16
##
## Application Security Threat Attack Modeling (ASTAM)
##
## Copyright (C) 2017 Applied Visions - http://securedecisions.com
##
## Written by Aspect Security - http://aspectsecurity.com
##
## Licensed under the Apache License, Version 2.0 (the "License");
## you may not use this file except in compliance with the License.
## You may obtain a copy of the License at
##
##     http://www.apache.org/licenses/LICENSE-2.0
##
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
## See the License for the specific language governing permissions and
## limitations under the License.

## Target Account's Username
username='bill@dotcms.com'

## Hostname or ip address
host='target.example.com'

# Server Port (default=80) and TLS configuration (0/missing=noTLS (default) // non-0=useTLS)  (both optional)
port=8080
useTLS=0

## HTTP method, only GET or POST supported (default=POST).
#method=POST

## COLON USAGE NOTE FOR uripath, formdata, msgsuccess, msgfailure
##
## A small bit of validation is done on the values to each of these parameters,
## but using a colon will interfere with this.  Instead of a colon, escape it
## as approprate:
##   * %3A for url-encoded strings
##   * \u003A for JSON
##   * \x{003A} for RegEx strings [alternate]
##   * . (any character dot) for RegEx strings [alternate]
##
## Nevertheless, using a colon is allowed, but this warning will be displayed:
## [INFORMATION] escape sequence \: detected in module option, no parameter verification is performed.


## Path to login.  Must be present, even if it is simple '/'
## * See colon caveat above
uripath='/c/portal_public/login'

## the URL-encoded form to POST or GET.  Caveats:
##
## * This must be application/x-www-form-urlencoded; multipart/formdata not supported.
## * Percent-Escape the form properly.
## * Usernames or passwords containing & will be %-escaped with %26
## * Usernames or passwords containing % will be %-escaped with %25
## * It is possible use JSON POST data; but the Content-type will be sent as x-www and with %-escape-ing
## * See colon caveat above
##
## the string ^USER^ will be replaced with the username to be tested.
## the string ^PASS^ will be replaced with the password to be tested.
formdata='my_account_cmd=auth&referer=%2Fc&my_account_r_m=false&password=^PASS^&my_account_login=^USER^&my_account_email_address='

### SUCCESS or FAILURE - choose only one detection mechanism (required, pick one)
## * This value is Perl Compatible Regular Expression
##   - Just the search is specified, e.g., the stuff between / / in a normal RE
##   - Letter case will be ignored
##   - Dot will match all character, including \n
## * If you do not know how to build a RE, just enter a string to match, it will work 99% of the time.
## * See colon caveat above

## Success string - a string returned to the user if login is successful.
msgsuccess='Processing login...'

## Failure string - a string returned to the user during unsuccessful login.
#msgfailure='Invalid Login'

## DICTIONARY or BRUTE-FORCE, pick one

## Dictionary File - path to dictionary file
## * Dictionary files are allowed be compressed with gzip.
dictionaryfile='sample-dictionary-02.txt'

## number of threads (optional, default 6)
threads=2
